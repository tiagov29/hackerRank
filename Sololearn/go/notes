package main : is the core of go everything begin in this function
fmt :
-for print something in the console => fmt.Println()
-for reading an input => fmt.Scanln(&variable)

varibale:
 var nameOfVariable int
 const nameOfVariable int

function:
allow to define a block of code

func sum(x,y int) int {
	return x+y
}
//the int outside of the brackets is for define the type of the return

func welcome(){
	fmt.println("Welcome")
}
func main(){
	defer welcome()
	fmt.Println("hey")
}
// with defer we guarantew the function run in the last turn

func calc(x int) ( int , int) {
	return (x*2, x*X)
}
//function take one input and return two integers double and his square

POINTERS
// pointers are special variables that hold the memory address of values.
// we declare it using *

var p *int //p is a ponter to an integer value.

// Using & operator, returns the memory address of a variable.
x := 42
p := &x // p is a pointer and holds the memory address of x.

// if we want to access to the underlying value of a pointer, we can use the *
fm.Println(*p) // returns 42
// we can change the value of the memory address the pointer holds:
*p = 8
fmt.println(*p) //returns 8

STRUCTS
//Structs are collections of fields that allow you to group data together.

type Contact struct {
	name string
	age int
}

// our Contact struct has two fields, a string and an integer.

x := Contact{"Santi", 30} // for creating a new contact

p := &x // here we can referenciate a struct

fmt.println(p.age) // returns 30

p := &Contact{"john",15} // we can use a pointer when we are creating a new struct

//methods are symple functions with a special receiver argument. Let's have a look at an
//example:

func (x Contact) welcome(){
	fmt.println(x.name)
	fmt.println(x.age)
}
// the receiver is the x XContact

x.welcome() // for calling the method

// code example

func welcome( x Contact) {
	fmt.Println(x.name)
	fmt.Println(x.age)
}
func main() {
	x := Contact{"James", 42}
	welcome(x)
}

// for change the data of the struct in a method, we can use pointers as method recivers

func (ptr *Contact) increase(val int){
	ptr.age += val
}

x := Contact{"james", 42}
x.increase(8)
fmt.Println(x.age)

ARRAYS
//We define an array using square brackets which define the number of elements
// the array will hold.
var a [5]int

a := [5]int{0, 2, 4, 6, 8} //you can define and initialize values of the array


var a [5]int

a[0] = 8
a[1] = 42

fmt.Println(a[1]) // returns 42

// An array has a FIXED size, meaning once defined, you cannot change the number
//of elements it holds for that reason go provides the slice, which is a dynamically-sized
// view into the elements of an array.
a := [5]int{0, 2, 4, 6, 8}
var s []int = a[1:3]
//this code selects the elements with index 1 to 3 from the a array, including
//the first given index, but excluding the last.
// So, the slice s will now include the values[2,4]
fmt.Println(s) // returns [0,6,8]
// you can access the values of the slice the same syntax as with arrays.

a := [5]int{0, 2, 4, 6, 8}
var s []int = a[1:3]

fmt.Println(s[1])
//A slice doesn´t store any data; it just describe a section of an underlying
// array. Changing the elements  of a slice modifies the corresponding elements
//of its underlying array
s[0] = 8
fmt.Println(a)

// go provides a make() function to create slices. This is how you create
// dynamically-sized arrays.

a := make([]int, 5)
// the make function creates an array of the given type and size, and returns
// a slice that refers to that array.
// after creating a slice, we can add append new elements to it using the append()
// function.

a := make([]int, 5)
a = append(a,8)
fmt.Println(a)

RANGE
// the range form of the for loop allows you to iterate
// over a slice:
a := make([]int, 5)
a[1] = 2
a[2] = 3

for i, v := range a {
	fmt.Println(i, v)
}

MAPS
//Maps are used to store key:value pairs.
/*the key is always unique.
We can create a map using the make() function, similar
to arrays*/

m := make(map[string]int)

/*Now, m is a map that maps a string key to an integer
value. Let's add some valuesto the map and output an element*/

m["Santi"] = 42
M["Amy"] = 24

fmt.println(m["Santi"])

// you can also initialize a map using the following syntax:

m := map[string]int{
	"santi": 42,
	"Amy":24
}

fmt.Println(m["Amy"])

// you can use the delete function to remove an element
// the map:
delete(m,"santi")

VARIADIC functions

/*are functions that can be called with any number of
arguments.

for example, the fmt.Println() function that we are using
is a common variadic function. You can provide it any number
of comma-separated arguments, and ir will output them
separated by spaces*/
fmt.Println("a", "b", "c")

/* you can also define your own variadic functons!
for example, let's make one that calculates and outputs
the sum of its arguments: */

func sum(nums ...int) {
	total := 0
	for _, v := range nums {
		total += v
	}
	fmt.Println(total)
}

// for multiples values in a slice and would like to use
// as arguments for a variadic function

s := []int{42, 33, 22, 11}
sum(s...)

CONCURRENCY
// multiple computations are happening at the same time, it is used when your program has
//multiple things to do.

/*For example, a shooting game, many things are happening at the same time:
enemies are running and shooting, points are being calculated, weapons are being unlocked
All of these things need to be happening concurrently.
FOr that reason the program si broken into parts, which are tehn executed separately.

A Goroutine is much like a thread to accomplish multiple tasks, but it consumes fewer resources
than OS threads

When a program is broken down inte separate tasks, each Goroutine can be used to accomplish
a task, enabling concurrency i our program.*/

func out(from, to int){
	for i :=from; i <= to; i++{
		time.Sleep(50 * time.Millisecond)
		fmt.println(i)
	}
}
func main() {
	out(0, 5)
	out(6, 10)
}

/*the out() function simply outputs numbers in the given range, we use a time.Sleep()
to emulate work being done between the outputs just for demostration purposes. It simply
waits for the provided time (50ms) before continuing the execution.
Now, if we call the function in main two times, the first call will execute first
followed by the secon call.

When we running concurrent programs, do not often want to wait for one task to finish before
starting a new one.
To achieve concurrency, let's start the function calls as Goroutines, using the go keyword:*/

func main(){
	go out(0,5)
	go out(6, 10)
}

/*Our program has 3 virtual threads: the 2 function calls, and main().
Our 2 function calls get executed concurrently, and main() does not wait for
them to finish*/


/*There is a mechanism to sync the Goroutines so that we know wehn one complete
its execution in main ()
Before learning about that mechanism, let's add
a time.Sleep() to the end of the main() function
in order to see the Goroutines in action:*/

func main(){
	go out(0,5)
	go out(6, 10)
	time.Sleep(50 * time.Millisecond)
}

CHANNELS
/*
Goroutines run independently and the do not know
when another one has finished executing. This causes,
for example, the main() function to quit. before any
started Goroutine has finished.
To enable communication betwen Goroutines, Go
provides Channels.
A channel is like a pipe, allowing you to send
and receive data from Goroutines, and enabling them
to communicate and synchronize.*/

// To use a channel, we firstneed to make one
//using the make() function:

ch := make(chan int)

/*The type after the chan keyword indicates the type
of the data we will send through the channel.
We can send data to the channel using the following
syntax.*/

ch <- 8

/*Similarly, we can receive data from the channel
using the following syntax*/

value := <- ch

// if we do not need the value as a variable, we can
// simply use:

<- ch

// data flows in the direction of the arrow.

/*Now we can use our channel and rewrite the 
previous example without a time.Sleep() in main()*/

func out(from, to int, ch chan bool){
	for i:= from; i<= to; i ++{
		time.Sleep(50 * time.Millisecond)
		fmt.Println(i)
	}
	ch <- true
}
func main() {
	ch := make(chan bool)

	go out(0, 5, ch)
	go out(6, 10, ch)
	<-ch
}


/*We define a bool channel and pass it to out
out() function as an argument. After the function
finishes its task, we send the value true to the
channel, which is received in main().
Now, main() is waiting to receive data from the cannel,
making the program wait for the Goroutines to finish
executing.
*/


/*Let´s use a channel to send data from a Goroutine
and use it in main().
Our program needs to calculate and output the sum of
all even numbers in a given range plus the sum
of their squares and output the result:
output = evenSum + squareSum

We will use two Goroutines: one to calculate the evenSum,
and the other to calculate the squareSum. We will get the
data using channels in main(), then calculate and output
the final sum.
*/

func evenSum(from, to int, ch chan int){
	result := 0
	for i:=from; i<=to; i++{
		if i%2 == 0 {
			result += i
		}
	}
	ch <- result
}
func squareSum(from, to int, ch chan int) {
	result := 0
	for i:=from; i<=to; i++{
		if i%2 == 0{
			result += i*i
		}
	}
	ch <- result
}
/* As you can see, our functions send the result via channels. Now we can call them as Goroutines in main() and
output the resulting sum:*/
func main(){
	evenCh := make(chan int)
	sqCh := make(chan int)
	
	go evenSum(0, 100, evenCh)
	go squareSum(0, 100, sqCh)
	fmt.Println(<-evenCh + <-sqCh)
}

// we use the channels to get the reult of each Goroutine and output their sum.
// if you don't need to send data to a channel anymore, you can close it using close(ch), where ch is the name
// of the channel, This is done in the sender.

SELECT
/* Select statement is used to wait on multiple channel operations.

The syntax is similar to switch except that each of the case statements will be a channel
operation.
let's use the same program from our previous example and select the channel that is ready
first: */

evenCh := make(chan int)
sqCh := make(chan int)

go evenSum(0, 100, evenCh)
go squareSum(0, 100, sqCh)

select {
	case x := <- evenCh:
		fmt.Println(x)
	case y := <- sqCh:
		fmt.Println(y)
}

/*The select statement waits for a channel to receive data and executes its case.
This mean that only one of the cases will execute -- the one that corresponds to the channel
that receives data first.
if both channels receive data at the same time, one of the cases is chosen randomly.

note:
Combining Goroutines and channels with select is a powerful feature of Go.
Imagine a program that needs to execute some code whenever one of the concurrent operations
completes -- this can be achieved using select. */


/*A select can have a default case, which will execute when no channel is ready.
For example, we could have an infinite for loop, waiting for one of the channels to
receive data:*/

for {
	select {
	case x := <- evenCh:
		fmt.Println(x)
		return
	case y := <- sqCh:
		fmt.Println(y)
		return
	default:
		fmt.Println("Nothing vailable")
		time.Sleep(50 * time. Millisecond)
	}
}

/* The for loop uses a select to check which channel got data. if none of them are ready,
the default case will execute which will wait for 50ms. As soon as a channel gets data,
 the return statement will exit the loop.

note :
A select statement blocks until at least one of its cases can proceed. The default case is
useful in preventing deadlocks -- without it the select would wait for a channel forever,
crashing the program if none of the channels received data. */